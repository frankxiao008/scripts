# -*- coding: utf-8 -*-
"""Copy of ResNet50RetinaNet.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1z5wIXuCXfHsIbn2aNWXgc3ngNx5bvzOF

## Load necessary modules
"""

!nvidia-smi

!python

!git clone https://github.com/fizyr/keras-retinanet.git

# Commented out IPython magic to ensure Python compatibility.
# %cd keras-retinanet/
!pip install .

!python setup.py build_ext --inplace

!pip install --upgrade keras

!pip install tensorflow-gpu

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/keras-retinanet/

# Commented out IPython magic to ensure Python compatibility.
# show images inline
# %matplotlib inline

# automatically reload modules when they have changed
# %load_ext autoreload
# %autoreload 2

# import keras
import keras

# import keras_retinanet
from keras_retinanet import models
from keras_retinanet.utils.image import read_image_bgr, preprocess_image, resize_image
from keras_retinanet.utils.visualization import draw_box, draw_caption
from keras_retinanet.utils.colors import label_color
from keras_retinanet.utils.gpu import setup_gpu

# import miscellaneous modules
import matplotlib.pyplot as plt
import cv2
import os
import numpy as np
import time

# use this to change which GPU to use
gpu = 0

# set the modified tf session as backend in keras
setup_gpu(gpu)

!wget https://github.com/fizyr/keras-retinanet/releases/download/0.5.1/resnet50_coco_best_v2.1.0.h5

# Commented out IPython magic to ensure Python compatibility.
# %mv resnet50_coco_best_v2.1.0.h5 snapshots/resnet50_coco_best_v2.1.0.h5

"""## Load RetinaNet model"""

# adjust this to point to your downloaded/trained model
# models can be downloaded here: https://github.com/fizyr/keras-retinanet/releases
model_path = os.path.join( 'snapshots', 'resnet50_coco_best_v2.1.0.h5')
print(model_path)
# load retinanet model
model = models.load_model(model_path, backbone_name='resnet50')

# if the model is not converted to an inference model, use the line below
# see: https://github.com/fizyr/keras-retinanet#converting-a-training-model-to-inference-model
# model = models.convert_model(model)

# print(model.summary())

# load label to names mapping for visualization purposes
labels_to_names = {0: 'person', 1: 'bicycle', 2: 'car', 3: 'motorcycle', 4: 'airplane', 5: 'bus', 6: 'train', 7: 'truck', 8: 'boat', 9: 'traffic light', 10: 'fire hydrant', 11: 'stop sign', 12: 'parking meter', 13: 'bench', 14: 'bird', 15: 'cat', 16: 'dog', 17: 'horse', 18: 'sheep', 19: 'cow', 20: 'elephant', 21: 'bear', 22: 'zebra', 23: 'giraffe', 24: 'backpack', 25: 'umbrella', 26: 'handbag', 27: 'tie', 28: 'suitcase', 29: 'frisbee', 30: 'skis', 31: 'snowboard', 32: 'sports ball', 33: 'kite', 34: 'baseball bat', 35: 'baseball glove', 36: 'skateboard', 37: 'surfboard', 38: 'tennis racket', 39: 'bottle', 40: 'wine glass', 41: 'cup', 42: 'fork', 43: 'knife', 44: 'spoon', 45: 'bowl', 46: 'banana', 47: 'apple', 48: 'sandwich', 49: 'orange', 50: 'broccoli', 51: 'carrot', 52: 'hot dog', 53: 'pizza', 54: 'donut', 55: 'cake', 56: 'chair', 57: 'couch', 58: 'potted plant', 59: 'bed', 60: 'dining table', 61: 'toilet', 62: 'tv', 63: 'laptop', 64: 'mouse', 65: 'remote', 66: 'keyboard', 67: 'cell phone', 68: 'microwave', 69: 'oven', 70: 'toaster', 71: 'sink', 72: 'refrigerator', 73: 'book', 74: 'clock', 75: 'vase', 76: 'scissors', 77: 'teddy bear', 78: 'hair drier', 79: 'toothbrush'}

print(model.summary())

# Commented out IPython magic to ensure Python compatibility.
# %ls /content/keras-retinanet/bottle_images

!git clone https://github.com/frankxiao008/selected_bottle_images.git

import os
filenameArray=[]
directory = '/content/keras-retinanet/selected_bottle_images'
for filename in os.listdir(directory):
    if filename.endswith(".jpg") or filename.endswith(".jpg"):
        filenameArray.append(os.path.join(directory, filename))
    else:
        continue

for filebottle in filenameArray:
  print(filebottle)

# Commented out IPython magic to ensure Python compatibility.
# %mkdir /content/keras-retinanet/bottles



from PIL import Image
from PIL import ImageFont
from PIL import ImageDraw
import sys


import os
filenameArray=[]
directory = '/content/keras-retinanet/selected_bottle_images'

counter = 0


# load image
#  img = Image.open(os.path.join(directory, filename))
#  out_file = '/content/keras-retinanet/bottles/'
    # load image
    # image = read_image_bgr(os.path.join(directory, filename))
filename2= "IMG_20191207_173747.jpg"
image = read_image_bgr(os.path.join(directory, filename2))


    # copy to draw on
draw = image.copy()
draw = cv2.cvtColor(draw, cv2.COLOR_BGR2RGB)


    # preprocess image for network
image = preprocess_image(image)
image, scale = resize_image(image)


    # imageObject.crop((100,30,400,300))
    # process image
start = time.time()
boxes, scores, labels = model.predict_on_batch(np.expand_dims(image, axis=0))
print("processing time: ", time.time() - start)

print("this is another part")
    # correct for image scale
boxes /= scale
    

    # print(boxes[0][0][0])
    # print(boxes[0].shape)
print(boxes[0][0])
print(boxes[0][1])
b1 = boxes[0][0].astype(int)
draw_box(draw, b1, color=(0, 0, 255))




    # visualize detections
for box, score, label in zip(boxes[0], scores[0], labels[0]):
        # scores are sorted so we can break
    if score < 0.5:
        break
      
    color = label_color(label)
        # color = (0, 0, 255)
    b = box.astype(int)

    if label == 39:
      print("=====================================")

      print(filename)
      draw_box(draw, b, color=color, thickness=4)
          
      caption = "{} {:.3f}".format(labels_to_names[label], score)
      print(box, score, label, caption)   
      draw_caption(draw, b, caption)
      counter += 1


plt.figure(figsize=(15, 15))
plt.axis('off')
plt.imshow(draw)
plt.show()

"""## Run detection on example"""

# from PIL import Image
# from PIL import ImageFont
# from PIL import ImageDraw
# import sys


# import os
# filenameArray=[]
# directory = '/content/keras-retinanet/selected_bottle_images'

# counter = 0
# for filename in os.listdir(directory):
#   if filename.endswith(".png") or filename.endswith(".jpg"):
#   # load image
#     img = Image.open(os.path.join(directory, filename))
#     out_file = '/content/keras-retinanet/bottles/'
#     # load image
#     image = read_image_bgr(os.path.join(directory, filename))


#     # copy to draw on
#     draw = image.copy()
#     draw = cv2.cvtColor(draw, cv2.COLOR_BGR2RGB)


#     # preprocess image for network
#     image = preprocess_image(image)
#     image, scale = resize_image(image)


#     # imageObject.crop((100,30,400,300))
#     # process image
#     start = time.time()
#     boxes, scores, labels = model.predict_on_batch(np.expand_dims(image, axis=0))
#     print("processing time: ", time.time() - start)

#     print("this is another part")
#     # correct for image scale
#     boxes /= scale
    

#     print(boxes[0][0][0])
#     print(boxes[0].shape)
#     # print(boxes[0][0])
#     # print(boxes[0][1])
#     b1 = boxes[0][0].astype(int)
#     draw_box(draw, b1, color=(0, 0, 255))

#     dataset = dict()
#     dataset["image_name"] = list()
#     dataset["bottle_name"]=list()
#     dataset["x_min"] = list()
#     dataset["y_min"] = list()
#     dataset["x_max"] = list()
#     dataset["y_max"] = list()
#     dataset["class_name"] = list()



#     # visualize detections
#     for box, score, label in zip(boxes[0], scores[0], labels[0]):
#         # scores are sorted so we can break
#         if score < 0.5:
#             break
      
#         color = label_color(label)
#         # color = (0, 0, 255)
#         b = box.astype(int)

#         if label == 39:
#           print("=====================================")
#           print(label)
#           print(filename)
#           print(os.path.splitext(filename)[0])
#           imageName=os.path.splitext(filename)[0]
#           draw_box(draw, b, color=color, thickness=4)
          
#           caption = "{} {:.3f}".format(labels_to_names[label], score)
#           print(box, score, label, caption)   
#           draw_caption(draw, b, caption)

#           dataset["image_name"].append(filename)
#           dataset["bottle_name"].append(f'{imageName}_bottle_{counter}.png')
#           dataset["x_min"].append(box[0])
#           dataset["y_min"].append(box[1])
#           dataset["x_max"].append(box[2])
#           dataset["y_max"].append(box[3])
#           dataset["class_name"].append(labels_to_names[label])   
#           counter += 1

#           cropped = img.crop((box[0],box[1],box[2],box[3]))
#           cropped.save(out_file + f'{imageName}_bottle_{counter}.png')

#   # plt.figure(figsize=(15, 15))
#   # plt.axis('off')
#   # plt.imshow(draw)
#   # plt.show()

import pandas as pd

df_bottle_crop = pd.DataFrame(data=dataset)

df_bottle_crop.to_csv('/content/keras-retinanet/bottles/bottles.csv')

bottles_directory = '/content/keras-retinanet/bottles'

numbers=0

for filename in os.listdir(bottles_directory):
  if numbers >10:
    break
  if filename.endswith(".png") or filename.endswith(".jpg"):
  # load image
    print(os.path.join(bottles_directory, filename))
    imgbottle = read_image_bgr(os.path.join(bottles_directory, filename))
    numbers+=1
    plt.axis('off')
    plt.imshow(imgbottle)
    plt.show()

from google.colab import drive
drive.mount("/drive")

# Commented out IPython magic to ensure Python compatibility.
# %ls /drive/My\ Drive/

# Commented out IPython magic to ensure Python compatibility.
# %cp -r /content/keras-retinanet/bottles /drive/My\ Drive/

!exit

